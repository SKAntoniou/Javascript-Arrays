// ==========================================================================
// Mixins
// ==========================================================================

// Colours & make dark
@mixin dark-colour($property, $palette, $catagory, $shade: base) {
  #{$property}: palette($palette, $catagory, $shade, base);
  &:hover, &:active {
    #{$property}: palette($palette, $catagory, $shade, dark);
  }
}

// Media queries
@mixin mq($break) {
  @if $break == 's' {
    @media (min-width: $break-small) {
      @content;
    }
  }
  @else if $break == 'm' {
    @media (min-width: $break-medium) {
      @content;
    }
  }
  @else if $break == 'l' {
    @media (min-width: $break-large) {
      @content;
    }
  }
  @else if $break == 'xl' {
    @media (min-width: $break-extra-large) {
      @content;
    }
  }
  @else {
    @error "Break-point #{$break} does not exist, check spelling and remember format is like: 's' or 'xl'.";
  }
}


// Light & Dark Mode colouring
@mixin ldmode-colours($mod) {
  @if ($mod == 'light' or $mod == 'dark') {
    $modmode: str-insert('mode', $mod, 0);

    & {
      --colour-background-base:  #{palette($modmode,'background','base')};
      --colour-background-secondary: #{palette($modmode,'background','secondary')};
      --colour-background-tertiary: #{palette($modmode,'background','tertiary')};
      --colour-background-accent: #{palette($modmode,'background','accent')};
      --colour-text-base: #{palette($modmode,'text','base')};
      --colour-text-contrast: #{palette($modmode,'text','contrast')};
      --colour-text-shadow: #{palette($modmode,'text','shadow')};
      --colour-button-box-shadow: #{palette('shared','button','box-shadow')};
      --colour-button-save: #{palette('shared','button','save')};
    }

  } @else {
    @error "Light & Dark mode function has been passed in incorrectly. The only allowed arguments are 'light' or 'dark'."
  }
};

// The sizing mixin that auto adds media queries where needed.
// This will increase compile time and make repeats in $break-sizing but worth it
@mixin sizing($property, $catagory, $element) {

  // Check for base sizing
  $base-property: break-sizing('base', $catagory, $element);
  @if $base-property == "inherit" {
    @error "Either #{$catagory} or #{$element} is not in base of $break-sizing";
  };
  // Add base styling to CSS.
  // To allow for CSS Variables
  & { 
    #{$property}: $base-property;
  }

  // Counter for highest valid breakpoint
  $highest-breakpoint: $base-property;

  // Check for if there are any matches in futher breakpoints
  $small-property: break-sizing('small', $catagory, $element);
  @if $small-property != "inherit" and $small-property != $highest-breakpoint {
    @include mq('s') {
      #{$property}: $small-property;
      $highest-breakpoint: $small-property;
    }
  }

  $medium-property: break-sizing('medium', $catagory, $element);
  @if $medium-property != "inherit" and $medium-property != $highest-breakpoint {
    @include mq('m') {
      #{$property}: $medium-property;
      $highest-breakpoint: $medium-property;
    }
  }

  $large-property: break-sizing('large', $catagory, $element);
  @if $large-property != "inherit" and $large-property != $highest-breakpoint {
    @include mq('l') {
      #{$property}: $large-property;
      $highest-breakpoint: $large-property;
    }
  }

  $xlarge-property: break-sizing('xlarge', $catagory, $element);
  @if $xlarge-property != "inherit" and $xlarge-property != $highest-breakpoint {
    @include mq('xl') {
      #{$property}: $xlarge-property;
      $highest-breakpoint: $xlarge-property;
    }
  }
};